(function(React2, react) {
  "use strict";
  const hubspot = {
    extend: render
  };
  const extend = (...args) => self.extend(...args);
  function render(renderCallback) {
    return extend((root, api) => {
      const renderCallbackResult = renderCallback(api);
      if (!React2.isValidElement(renderCallbackResult)) {
        throw new Error(`[hubspot.extend]: Expected callback function to return a valid element, got: ${renderCallbackResult}`);
      }
      react.createRoot(root).render(renderCallbackResult);
      root.mount();
    });
  }
  const Alert = react.createRemoteReactComponent("Alert");
  react.createRemoteReactComponent("Button");
  react.createRemoteReactComponent("ButtonRow");
  react.createRemoteReactComponent("Card");
  react.createRemoteReactComponent("DescriptionList");
  react.createRemoteReactComponent("DescriptionListItem");
  react.createRemoteReactComponent("Divider");
  react.createRemoteReactComponent("EmptyState");
  react.createRemoteReactComponent("ErrorState");
  react.createRemoteReactComponent("Form");
  react.createRemoteReactComponent("Heading");
  react.createRemoteReactComponent("Image");
  react.createRemoteReactComponent("Input");
  const Link = react.createRemoteReactComponent("Link");
  react.createRemoteReactComponent("TextArea");
  react.createRemoteReactComponent("Textarea");
  const LoadingSpinner = react.createRemoteReactComponent("LoadingSpinner");
  react.createRemoteReactComponent("ProgressBar");
  react.createRemoteReactComponent("Select");
  react.createRemoteReactComponent("Tag");
  react.createRemoteReactComponent("Text");
  react.createRemoteReactComponent("Tile");
  react.createRemoteReactComponent("Stack");
  react.createRemoteReactComponent("ToggleGroup");
  react.createRemoteReactComponent("StatisticsItem");
  react.createRemoteReactComponent("Statistics");
  react.createRemoteReactComponent("StatisticsTrend");
  const Table = react.createRemoteReactComponent("Table");
  react.createRemoteReactComponent("TableFooter");
  const TableCell = react.createRemoteReactComponent("TableCell");
  const TableRow = react.createRemoteReactComponent("TableRow");
  const TableBody = react.createRemoteReactComponent("TableBody");
  const TableHeader = react.createRemoteReactComponent("TableHeader");
  const TableHead = react.createRemoteReactComponent("TableHead");
  react.createRemoteReactComponent("NumberInput");
  react.createRemoteReactComponent("Box");
  react.createRemoteReactComponent("StepIndicator");
  react.createRemoteReactComponent("Accordion");
  react.createRemoteReactComponent("MultiSelect");
  react.createRemoteReactComponent("Flex");
  react.createRemoteReactComponent("DateInput");
  var ServerlessExecutionStatus;
  (function(ServerlessExecutionStatus2) {
    ServerlessExecutionStatus2["Success"] = "SUCCESS";
    ServerlessExecutionStatus2["Error"] = "ERROR";
  })(ServerlessExecutionStatus || (ServerlessExecutionStatus = {}));
  const CompaniesWithDistanceTable = ({
    portalId,
    companies,
    propertiesToDisplay
  }) => {
    return /* @__PURE__ */ React2.createElement(Table, { bordered: true }, /* @__PURE__ */ React2.createElement(TableHead, null, /* @__PURE__ */ React2.createElement(TableRow, null, /* @__PURE__ */ React2.createElement(TableHeader, null, "Company Name"), /* @__PURE__ */ React2.createElement(TableHeader, null, "Distance"), propertiesToDisplay.map((p) => /* @__PURE__ */ React2.createElement(TableHeader, null, p.title)))), /* @__PURE__ */ React2.createElement(TableBody, null, companies.map((company) => {
      return /* @__PURE__ */ React2.createElement(TableRow, { key: company.id }, /* @__PURE__ */ React2.createElement(TableCell, null, /* @__PURE__ */ React2.createElement(
        Link,
        {
          href: `https://app.hubspot.com/contacts/${portalId}/record/0-2/${company.id}`
        },
        company.properties.name
      )), /* @__PURE__ */ React2.createElement(TableCell, null, company.distance.toFixed(2), " miles"), propertiesToDisplay.map((p) => /* @__PURE__ */ React2.createElement(TableCell, null, company.properties[p.propertyName])));
    })));
  };
  const NearestCompanies = ({ context, runServerless, fetchProperties }) => {
    const [loading, setLoading] = React2.useState(false);
    const [errorMessage, setErrorMessage] = React2.useState(null);
    const [nearestCompaniesSorted, setNearestCompaniesSorted] = React2.useState([]);
    const companiesToDisplay = 3;
    React2.useEffect(async () => {
      setLoading(true);
      const companiesServerlessResponse = await runServerless({
        name: "get-companies-with-distance-batch",
        propertiesToSend: ["hs_object_id", "city", "state", "address"],
        payload: { batchSize: 30 }
      });
      if (companiesServerlessResponse.status == "SUCCESS") {
        const { companies } = companiesServerlessResponse.response;
        setNearestCompaniesSorted(
          companies.sort((c1, c2) => c1.distance - c2.distance)
        );
      } else {
        setErrorMessage(companiesServerlessResponse.message);
      }
      setLoading(false);
    }, [fetchProperties, runServerless]);
    if (errorMessage) {
      return /* @__PURE__ */ React2.createElement(Alert, { title: "Error executing serverless function", variant: "error" }, errorMessage);
    }
    if (loading) {
      return /* @__PURE__ */ React2.createElement(LoadingSpinner, null);
    }
    return /* @__PURE__ */ React2.createElement(
      CompaniesWithDistanceTable,
      {
        portalId: context.portal.id,
        companies: nearestCompaniesSorted.slice(0, companiesToDisplay),
        propertiesToDisplay: [
          { title: "Domain", propertyName: "domain" },
          { title: "Phone", propertyName: "phone" }
        ]
      }
    );
  };
  hubspot.extend(({ actions, context, runServerlessFunction }) => /* @__PURE__ */ React2.createElement(
    NearestCompanies,
    {
      runServerless: runServerlessFunction,
      context,
      fetchProperties: actions.fetchCrmObjectProperties
    }
  ));
})(React, RemoteUI);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTmVhcmVzdENvbXBhbmllcy5qcyIsInNvdXJjZXMiOlsiLi4vbm9kZV9tb2R1bGVzL0BodWJzcG90L3VpLWV4dGVuc2lvbnMvZGlzdC9odWJzcG90LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BodWJzcG90L3VpLWV4dGVuc2lvbnMvZGlzdC9jb3JlQ29tcG9uZW50cy5qcyIsIi4uL25vZGVfbW9kdWxlcy9AaHVic3BvdC91aS1leHRlbnNpb25zL2Rpc3QvdHlwZXMuanMiLCIuLi9jb21wb25lbnRzL0NvbXBhbmllc1dpdGhEaXN0YW5jZVRhYmxlLmpzeCIsIi4uL05lYXJlc3RDb21wYW5pZXMuanN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIGh1YnNwb3QtZGV2L25vLWNvbmZ1c2luZy1icm93c2VyLWdsb2JhbHMgKi9cbmltcG9ydCB7IGNyZWF0ZVJvb3QgfSBmcm9tICdAcmVtb3RlLXVpL3JlYWN0JztcbmltcG9ydCB7IGlzVmFsaWRFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuZXhwb3J0IGNvbnN0IGh1YnNwb3QgPSB7XG4gICAgZXh0ZW5kOiByZW5kZXIsXG59O1xuY29uc3QgZXh0ZW5kID0gKC4uLmFyZ3MpID0+IHNlbGYuZXh0ZW5kKC4uLmFyZ3MpO1xuZnVuY3Rpb24gcmVuZGVyKHJlbmRlckNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIGV4dGVuZCgocm9vdCwgYXBpKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlbmRlckNhbGxiYWNrUmVzdWx0ID0gcmVuZGVyQ2FsbGJhY2soYXBpKTtcbiAgICAgICAgaWYgKCFpc1ZhbGlkRWxlbWVudChyZW5kZXJDYWxsYmFja1Jlc3VsdCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgW2h1YnNwb3QuZXh0ZW5kXTogRXhwZWN0ZWQgY2FsbGJhY2sgZnVuY3Rpb24gdG8gcmV0dXJuIGEgdmFsaWQgZWxlbWVudCwgZ290OiAke3JlbmRlckNhbGxiYWNrUmVzdWx0fWApO1xuICAgICAgICB9XG4gICAgICAgIGNyZWF0ZVJvb3Qocm9vdCkucmVuZGVyKHJlbmRlckNhbGxiYWNrUmVzdWx0KTtcbiAgICAgICAgcm9vdC5tb3VudCgpO1xuICAgIH0pO1xufVxuIiwiaW1wb3J0IHsgY3JlYXRlUmVtb3RlUmVhY3RDb21wb25lbnQgfSBmcm9tICdAcmVtb3RlLXVpL3JlYWN0JztcbmV4cG9ydCBjb25zdCBBbGVydCA9IGNyZWF0ZVJlbW90ZVJlYWN0Q29tcG9uZW50KCdBbGVydCcpO1xuZXhwb3J0IGNvbnN0IEJ1dHRvbiA9IGNyZWF0ZVJlbW90ZVJlYWN0Q29tcG9uZW50KCdCdXR0b24nKTtcbmV4cG9ydCBjb25zdCBCdXR0b25Sb3cgPSBjcmVhdGVSZW1vdGVSZWFjdENvbXBvbmVudCgnQnV0dG9uUm93Jyk7XG5leHBvcnQgY29uc3QgQ2FyZCA9IGNyZWF0ZVJlbW90ZVJlYWN0Q29tcG9uZW50KCdDYXJkJyk7XG5leHBvcnQgY29uc3QgRGVzY3JpcHRpb25MaXN0ID0gY3JlYXRlUmVtb3RlUmVhY3RDb21wb25lbnQoJ0Rlc2NyaXB0aW9uTGlzdCcpO1xuZXhwb3J0IGNvbnN0IERlc2NyaXB0aW9uTGlzdEl0ZW0gPSBjcmVhdGVSZW1vdGVSZWFjdENvbXBvbmVudCgnRGVzY3JpcHRpb25MaXN0SXRlbScpO1xuZXhwb3J0IGNvbnN0IERpdmlkZXIgPSBjcmVhdGVSZW1vdGVSZWFjdENvbXBvbmVudCgnRGl2aWRlcicpO1xuZXhwb3J0IGNvbnN0IEVtcHR5U3RhdGUgPSBjcmVhdGVSZW1vdGVSZWFjdENvbXBvbmVudCgnRW1wdHlTdGF0ZScpO1xuZXhwb3J0IGNvbnN0IEVycm9yU3RhdGUgPSBjcmVhdGVSZW1vdGVSZWFjdENvbXBvbmVudCgnRXJyb3JTdGF0ZScpO1xuZXhwb3J0IGNvbnN0IEZvcm0gPSBjcmVhdGVSZW1vdGVSZWFjdENvbXBvbmVudCgnRm9ybScpO1xuZXhwb3J0IGNvbnN0IEhlYWRpbmcgPSBjcmVhdGVSZW1vdGVSZWFjdENvbXBvbmVudCgnSGVhZGluZycpO1xuZXhwb3J0IGNvbnN0IEltYWdlID0gY3JlYXRlUmVtb3RlUmVhY3RDb21wb25lbnQoJ0ltYWdlJyk7XG5leHBvcnQgY29uc3QgSW5wdXQgPSBjcmVhdGVSZW1vdGVSZWFjdENvbXBvbmVudCgnSW5wdXQnKTtcbmV4cG9ydCBjb25zdCBMaW5rID0gY3JlYXRlUmVtb3RlUmVhY3RDb21wb25lbnQoJ0xpbmsnKTtcbmV4cG9ydCBjb25zdCBUZXh0QXJlYSA9IGNyZWF0ZVJlbW90ZVJlYWN0Q29tcG9uZW50KCdUZXh0QXJlYScpO1xuLy8gVGV4dGFyZWEgd2FzIGNoYW5nZWQgdG8gVGV4dEFyZWFcbi8vIEV4cG9ydGluZyBib3RoIGZvciBiYWNrd2FyZHMgY29tcGF0XG4vKiogQGRlcHJlY2F0ZWQgdXNlIFRleHRBcmVhIGluc3RlYWQuIFdpdGggYSBjYXBpdGFsIEEuKi9cbmV4cG9ydCBjb25zdCBUZXh0YXJlYSA9IGNyZWF0ZVJlbW90ZVJlYWN0Q29tcG9uZW50KCdUZXh0YXJlYScpO1xuZXhwb3J0IGNvbnN0IExvYWRpbmdTcGlubmVyID0gY3JlYXRlUmVtb3RlUmVhY3RDb21wb25lbnQoJ0xvYWRpbmdTcGlubmVyJyk7XG5leHBvcnQgY29uc3QgUHJvZ3Jlc3NCYXIgPSBjcmVhdGVSZW1vdGVSZWFjdENvbXBvbmVudCgnUHJvZ3Jlc3NCYXInKTtcbmV4cG9ydCBjb25zdCBTZWxlY3QgPSBjcmVhdGVSZW1vdGVSZWFjdENvbXBvbmVudCgnU2VsZWN0Jyk7XG5leHBvcnQgY29uc3QgVGFnID0gY3JlYXRlUmVtb3RlUmVhY3RDb21wb25lbnQoJ1RhZycpO1xuZXhwb3J0IGNvbnN0IFRleHQgPSBjcmVhdGVSZW1vdGVSZWFjdENvbXBvbmVudCgnVGV4dCcpO1xuZXhwb3J0IGNvbnN0IFRpbGUgPSBjcmVhdGVSZW1vdGVSZWFjdENvbXBvbmVudCgnVGlsZScpO1xuLyoqIEBkZXByZWNhdGVkIHVzZSBGbGV4IGluc3RlYWQuIEl0IHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCByZWxlYXNlLiAqL1xuZXhwb3J0IGNvbnN0IFN0YWNrID0gY3JlYXRlUmVtb3RlUmVhY3RDb21wb25lbnQoJ1N0YWNrJyk7XG5leHBvcnQgY29uc3QgVG9nZ2xlR3JvdXAgPSBjcmVhdGVSZW1vdGVSZWFjdENvbXBvbmVudCgnVG9nZ2xlR3JvdXAnKTtcbmV4cG9ydCBjb25zdCBTdGF0aXN0aWNzSXRlbSA9IGNyZWF0ZVJlbW90ZVJlYWN0Q29tcG9uZW50KCdTdGF0aXN0aWNzSXRlbScpO1xuZXhwb3J0IGNvbnN0IFN0YXRpc3RpY3MgPSBjcmVhdGVSZW1vdGVSZWFjdENvbXBvbmVudCgnU3RhdGlzdGljcycpO1xuZXhwb3J0IGNvbnN0IFN0YXRpc3RpY3NUcmVuZCA9IGNyZWF0ZVJlbW90ZVJlYWN0Q29tcG9uZW50KCdTdGF0aXN0aWNzVHJlbmQnKTtcbmV4cG9ydCBjb25zdCBUYWJsZSA9IGNyZWF0ZVJlbW90ZVJlYWN0Q29tcG9uZW50KCdUYWJsZScpO1xuZXhwb3J0IGNvbnN0IFRhYmxlRm9vdGVyID0gY3JlYXRlUmVtb3RlUmVhY3RDb21wb25lbnQoJ1RhYmxlRm9vdGVyJyk7XG5leHBvcnQgY29uc3QgVGFibGVDZWxsID0gY3JlYXRlUmVtb3RlUmVhY3RDb21wb25lbnQoJ1RhYmxlQ2VsbCcpO1xuZXhwb3J0IGNvbnN0IFRhYmxlUm93ID0gY3JlYXRlUmVtb3RlUmVhY3RDb21wb25lbnQoJ1RhYmxlUm93Jyk7XG5leHBvcnQgY29uc3QgVGFibGVCb2R5ID0gY3JlYXRlUmVtb3RlUmVhY3RDb21wb25lbnQoJ1RhYmxlQm9keScpO1xuZXhwb3J0IGNvbnN0IFRhYmxlSGVhZGVyID0gY3JlYXRlUmVtb3RlUmVhY3RDb21wb25lbnQoJ1RhYmxlSGVhZGVyJyk7XG5leHBvcnQgY29uc3QgVGFibGVIZWFkID0gY3JlYXRlUmVtb3RlUmVhY3RDb21wb25lbnQoJ1RhYmxlSGVhZCcpO1xuZXhwb3J0IGNvbnN0IE51bWJlcklucHV0ID0gY3JlYXRlUmVtb3RlUmVhY3RDb21wb25lbnQoJ051bWJlcklucHV0Jyk7XG5leHBvcnQgY29uc3QgQm94ID0gY3JlYXRlUmVtb3RlUmVhY3RDb21wb25lbnQoJ0JveCcpO1xuZXhwb3J0IGNvbnN0IFN0ZXBJbmRpY2F0b3IgPSBjcmVhdGVSZW1vdGVSZWFjdENvbXBvbmVudCgnU3RlcEluZGljYXRvcicpO1xuZXhwb3J0IGNvbnN0IEFjY29yZGlvbiA9IGNyZWF0ZVJlbW90ZVJlYWN0Q29tcG9uZW50KCdBY2NvcmRpb24nKTtcbmV4cG9ydCBjb25zdCBNdWx0aVNlbGVjdCA9IGNyZWF0ZVJlbW90ZVJlYWN0Q29tcG9uZW50KCdNdWx0aVNlbGVjdCcpO1xuZXhwb3J0IGNvbnN0IEZsZXggPSBjcmVhdGVSZW1vdGVSZWFjdENvbXBvbmVudCgnRmxleCcpO1xuZXhwb3J0IGNvbnN0IERhdGVJbnB1dCA9IGNyZWF0ZVJlbW90ZVJlYWN0Q29tcG9uZW50KCdEYXRlSW5wdXQnKTtcbiIsImV4cG9ydCB2YXIgU2VydmVybGVzc0V4ZWN1dGlvblN0YXR1cztcbihmdW5jdGlvbiAoU2VydmVybGVzc0V4ZWN1dGlvblN0YXR1cykge1xuICAgIFNlcnZlcmxlc3NFeGVjdXRpb25TdGF0dXNbXCJTdWNjZXNzXCJdID0gXCJTVUNDRVNTXCI7XG4gICAgU2VydmVybGVzc0V4ZWN1dGlvblN0YXR1c1tcIkVycm9yXCJdID0gXCJFUlJPUlwiO1xufSkoU2VydmVybGVzc0V4ZWN1dGlvblN0YXR1cyB8fCAoU2VydmVybGVzc0V4ZWN1dGlvblN0YXR1cyA9IHt9KSk7XG5leHBvcnQgY2xhc3MgUmVtb3RlRXZlbnQge1xuICAgIHR5cGU7XG4gICAgYnViYmxlcztcbiAgICB0aW1lU3RhbXA7XG4gICAgdGFyZ2V0VmFsdWU7XG4gICAgY29uc3RydWN0b3IodmFsdWUsIGV2ZW50KSB7XG4gICAgICAgIHRoaXMuYnViYmxlcyA9IGV2ZW50LmJ1YmJsZXM7XG4gICAgICAgIHRoaXMudHlwZSA9IGV2ZW50LnR5cGU7XG4gICAgICAgIHRoaXMudGltZVN0YW1wID0gZXZlbnQudGltZVN0YW1wO1xuICAgICAgICB0aGlzLnRhcmdldFZhbHVlID0gdmFsdWU7XG4gICAgfVxufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHtcbiAgTGluayxcbiAgVGFibGUsXG4gIFRhYmxlSGVhZCxcbiAgVGFibGVSb3csXG4gIFRhYmxlSGVhZGVyLFxuICBUYWJsZUJvZHksXG4gIFRhYmxlQ2VsbCxcbn0gZnJvbSBcIkBodWJzcG90L3VpLWV4dGVuc2lvbnNcIjtcblxuZXhwb3J0IGNvbnN0IENvbXBhbmllc1dpdGhEaXN0YW5jZVRhYmxlID0gKHtcbiAgcG9ydGFsSWQsXG4gIGNvbXBhbmllcyxcbiAgcHJvcGVydGllc1RvRGlzcGxheSxcbn0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8VGFibGUgYm9yZGVyZWQ9e3RydWV9PlxuICAgICAgPFRhYmxlSGVhZD5cbiAgICAgICAgPFRhYmxlUm93PlxuICAgICAgICAgIDxUYWJsZUhlYWRlcj5Db21wYW55IE5hbWU8L1RhYmxlSGVhZGVyPlxuICAgICAgICAgIDxUYWJsZUhlYWRlcj5EaXN0YW5jZTwvVGFibGVIZWFkZXI+XG4gICAgICAgICAge3Byb3BlcnRpZXNUb0Rpc3BsYXkubWFwKChwKSA9PiAoXG4gICAgICAgICAgICA8VGFibGVIZWFkZXI+e3AudGl0bGV9PC9UYWJsZUhlYWRlcj5cbiAgICAgICAgICApKX1cbiAgICAgICAgPC9UYWJsZVJvdz5cbiAgICAgIDwvVGFibGVIZWFkPlxuICAgICAgPFRhYmxlQm9keT5cbiAgICAgICAge2NvbXBhbmllcy5tYXAoKGNvbXBhbnkpID0+IHtcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPFRhYmxlUm93IGtleT17Y29tcGFueS5pZH0+XG4gICAgICAgICAgICAgIDxUYWJsZUNlbGw+XG4gICAgICAgICAgICAgICAgPExpbmtcbiAgICAgICAgICAgICAgICAgIGhyZWY9e2BodHRwczovL2FwcC5odWJzcG90LmNvbS9jb250YWN0cy8ke3BvcnRhbElkfS9yZWNvcmQvMC0yLyR7Y29tcGFueS5pZH1gfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIHtjb21wYW55LnByb3BlcnRpZXMubmFtZX1cbiAgICAgICAgICAgICAgICA8L0xpbms+XG4gICAgICAgICAgICAgIDwvVGFibGVDZWxsPlxuICAgICAgICAgICAgICA8VGFibGVDZWxsPntjb21wYW55LmRpc3RhbmNlLnRvRml4ZWQoMil9IG1pbGVzPC9UYWJsZUNlbGw+XG4gICAgICAgICAgICAgIHtwcm9wZXJ0aWVzVG9EaXNwbGF5Lm1hcCgocCkgPT4gKFxuICAgICAgICAgICAgICAgIDxUYWJsZUNlbGw+e2NvbXBhbnkucHJvcGVydGllc1twLnByb3BlcnR5TmFtZV19PC9UYWJsZUNlbGw+XG4gICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgPC9UYWJsZVJvdz5cbiAgICAgICAgICApO1xuICAgICAgICB9KX1cbiAgICAgIDwvVGFibGVCb2R5PlxuICAgIDwvVGFibGU+XG4gICk7XG59O1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IEFsZXJ0LCBMb2FkaW5nU3Bpbm5lciB9IGZyb20gXCJAaHVic3BvdC91aS1leHRlbnNpb25zXCI7XG5pbXBvcnQgeyBDb21wYW5pZXNXaXRoRGlzdGFuY2VUYWJsZSB9IGZyb20gXCIuL2NvbXBvbmVudHMvQ29tcGFuaWVzV2l0aERpc3RhbmNlVGFibGUuanN4XCI7XG5pbXBvcnQgeyBodWJzcG90IH0gZnJvbSBcIkBodWJzcG90L3VpLWV4dGVuc2lvbnNcIjtcblxuY29uc3QgTmVhcmVzdENvbXBhbmllcyA9ICh7IGNvbnRleHQsIHJ1blNlcnZlcmxlc3MsIGZldGNoUHJvcGVydGllcyB9KSA9PiB7XG4gIGNvbnN0IFtsb2FkaW5nLCBzZXRMb2FkaW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW2Vycm9yTWVzc2FnZSwgc2V0RXJyb3JNZXNzYWdlXSA9IHVzZVN0YXRlKG51bGwpO1xuICBjb25zdCBbbmVhcmVzdENvbXBhbmllc1NvcnRlZCwgc2V0TmVhcmVzdENvbXBhbmllc1NvcnRlZF0gPSB1c2VTdGF0ZShbXSk7XG4gIGNvbnN0IGNvbXBhbmllc1RvRGlzcGxheSA9IDM7XG5cbiAgdXNlRWZmZWN0KGFzeW5jICgpID0+IHtcbiAgICBzZXRMb2FkaW5nKHRydWUpO1xuICAgIGNvbnN0IGNvbXBhbmllc1NlcnZlcmxlc3NSZXNwb25zZSA9IGF3YWl0IHJ1blNlcnZlcmxlc3Moe1xuICAgICAgbmFtZTogXCJnZXQtY29tcGFuaWVzLXdpdGgtZGlzdGFuY2UtYmF0Y2hcIixcbiAgICAgIHByb3BlcnRpZXNUb1NlbmQ6IFtcImhzX29iamVjdF9pZFwiLCBcImNpdHlcIiwgXCJzdGF0ZVwiLCBcImFkZHJlc3NcIl0sXG4gICAgICBwYXlsb2FkOiB7IGJhdGNoU2l6ZTogMzAgfSxcbiAgICB9KTtcbiAgICBpZiAoY29tcGFuaWVzU2VydmVybGVzc1Jlc3BvbnNlLnN0YXR1cyA9PSBcIlNVQ0NFU1NcIikge1xuICAgICAgY29uc3QgeyBjb21wYW5pZXMgfSA9IGNvbXBhbmllc1NlcnZlcmxlc3NSZXNwb25zZS5yZXNwb25zZTtcbiAgICAgIHNldE5lYXJlc3RDb21wYW5pZXNTb3J0ZWQoXG4gICAgICAgIGNvbXBhbmllcy5zb3J0KChjMSwgYzIpID0+IGMxLmRpc3RhbmNlIC0gYzIuZGlzdGFuY2UpXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXRFcnJvck1lc3NhZ2UoY29tcGFuaWVzU2VydmVybGVzc1Jlc3BvbnNlLm1lc3NhZ2UpO1xuICAgIH1cbiAgICBzZXRMb2FkaW5nKGZhbHNlKTtcbiAgfSwgW2ZldGNoUHJvcGVydGllcywgcnVuU2VydmVybGVzc10pO1xuXG4gIGlmIChlcnJvck1lc3NhZ2UpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPEFsZXJ0IHRpdGxlPVwiRXJyb3IgZXhlY3V0aW5nIHNlcnZlcmxlc3MgZnVuY3Rpb25cIiB2YXJpYW50PVwiZXJyb3JcIj5cbiAgICAgICAge2Vycm9yTWVzc2FnZX1cbiAgICAgIDwvQWxlcnQ+XG4gICAgKTtcbiAgfVxuICBpZiAobG9hZGluZykge1xuICAgIHJldHVybiA8TG9hZGluZ1NwaW5uZXIgLz47XG4gIH1cbiAgcmV0dXJuIChcbiAgICA8Q29tcGFuaWVzV2l0aERpc3RhbmNlVGFibGVcbiAgICAgIHBvcnRhbElkPXtjb250ZXh0LnBvcnRhbC5pZH1cbiAgICAgIGNvbXBhbmllcz17bmVhcmVzdENvbXBhbmllc1NvcnRlZC5zbGljZSgwLCBjb21wYW5pZXNUb0Rpc3BsYXkpfVxuICAgICAgcHJvcGVydGllc1RvRGlzcGxheT17W1xuICAgICAgICB7IHRpdGxlOiBcIkRvbWFpblwiLCBwcm9wZXJ0eU5hbWU6IFwiZG9tYWluXCIgfSxcbiAgICAgICAgeyB0aXRsZTogXCJQaG9uZVwiLCBwcm9wZXJ0eU5hbWU6IFwicGhvbmVcIiB9LFxuICAgICAgXX1cbiAgICAvPlxuICApO1xufTtcblxuaHVic3BvdC5leHRlbmQoKHsgYWN0aW9ucywgY29udGV4dCwgcnVuU2VydmVybGVzc0Z1bmN0aW9uIH0pID0+IChcbiAgPE5lYXJlc3RDb21wYW5pZXNcbiAgICBydW5TZXJ2ZXJsZXNzPXtydW5TZXJ2ZXJsZXNzRnVuY3Rpb259XG4gICAgY29udGV4dD17Y29udGV4dH1cbiAgICBmZXRjaFByb3BlcnRpZXM9e2FjdGlvbnMuZmV0Y2hDcm1PYmplY3RQcm9wZXJ0aWVzfVxuICAvPlxuKSk7XG4iXSwibmFtZXMiOlsiaXNWYWxpZEVsZW1lbnQiLCJjcmVhdGVSb290IiwiY3JlYXRlUmVtb3RlUmVhY3RDb21wb25lbnQiLCJTZXJ2ZXJsZXNzRXhlY3V0aW9uU3RhdHVzIiwiUmVhY3QiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCJdLCJtYXBwaW5ncyI6Ijs7QUFHTyxRQUFNLFVBQVU7QUFBQSxJQUNuQixRQUFRO0FBQUEsRUFDWjtBQUNBLFFBQU0sU0FBUyxJQUFJLFNBQVMsS0FBSyxPQUFPLEdBQUcsSUFBSTtBQUMvQyxXQUFTLE9BQU8sZ0JBQWdCO0FBQzVC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
