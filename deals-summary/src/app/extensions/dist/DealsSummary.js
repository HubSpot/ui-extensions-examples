(function(React2, react) {
  "use strict";
  const hubspot = {
    extend: render
  };
  const extend = (...args) => self.extend(...args);
  function render(renderCallback) {
    return extend((root, api) => {
      const renderCallbackResult = renderCallback(api);
      if (!React2.isValidElement(renderCallbackResult)) {
        throw new Error(`[hubspot.extend]: Expected callback function to return a valid element, got: ${renderCallbackResult}`);
      }
      react.createRoot(root).render(renderCallbackResult);
      root.mount();
    });
  }
  const Alert = react.createRemoteReactComponent("Alert");
  react.createRemoteReactComponent("Button");
  react.createRemoteReactComponent("ButtonRow");
  react.createRemoteReactComponent("Card");
  react.createRemoteReactComponent("DescriptionList");
  react.createRemoteReactComponent("DescriptionListItem");
  react.createRemoteReactComponent("Divider");
  react.createRemoteReactComponent("EmptyState");
  react.createRemoteReactComponent("ErrorState");
  react.createRemoteReactComponent("Form");
  react.createRemoteReactComponent("Heading");
  react.createRemoteReactComponent("Image");
  react.createRemoteReactComponent("Input");
  react.createRemoteReactComponent("Link");
  react.createRemoteReactComponent("TextArea");
  react.createRemoteReactComponent("Textarea");
  const LoadingSpinner = react.createRemoteReactComponent("LoadingSpinner");
  react.createRemoteReactComponent("ProgressBar");
  react.createRemoteReactComponent("Select");
  react.createRemoteReactComponent("Tag");
  const Text = react.createRemoteReactComponent("Text");
  react.createRemoteReactComponent("Tile");
  react.createRemoteReactComponent("Stack");
  react.createRemoteReactComponent("ToggleGroup");
  const StatisticsItem = react.createRemoteReactComponent("StatisticsItem");
  const Statistics = react.createRemoteReactComponent("Statistics");
  react.createRemoteReactComponent("StatisticsTrend");
  react.createRemoteReactComponent("Table");
  react.createRemoteReactComponent("TableFooter");
  react.createRemoteReactComponent("TableCell");
  react.createRemoteReactComponent("TableRow");
  react.createRemoteReactComponent("TableBody");
  react.createRemoteReactComponent("TableHeader");
  react.createRemoteReactComponent("TableHead");
  react.createRemoteReactComponent("NumberInput");
  react.createRemoteReactComponent("Box");
  react.createRemoteReactComponent("StepIndicator");
  react.createRemoteReactComponent("Accordion");
  react.createRemoteReactComponent("MultiSelect");
  react.createRemoteReactComponent("Flex");
  react.createRemoteReactComponent("DateInput");
  var ServerlessExecutionStatus;
  (function(ServerlessExecutionStatus2) {
    ServerlessExecutionStatus2["Success"] = "SUCCESS";
    ServerlessExecutionStatus2["Error"] = "ERROR";
  })(ServerlessExecutionStatus || (ServerlessExecutionStatus = {}));
  const DealsSummary = ({ runServerless }) => {
    const [loading, setLoading] = React2.useState(true);
    const [errorMessage, setErrorMessage] = React2.useState("");
    const [dealsCount, setDealsCount] = React2.useState(0);
    const [totalAmount, setTotalAmount] = React2.useState(0);
    React2.useEffect(() => {
      const executeServerless = async () => {
        const serverlessResponse = await runServerless({
          name: "get-data",
          propertiesToSend: ["hs_object_id"]
        });
        setLoading(false);
        if (serverlessResponse.status == "SUCCESS") {
          const { response } = serverlessResponse;
          setDealsCount(response.dealsCount);
          setTotalAmount(response.totalAmount);
        } else {
          setErrorMessage(serverlessResponse.message);
        }
      };
      executeServerless();
    }, [runServerless]);
    if (loading) {
      return /* @__PURE__ */ React2.createElement(LoadingSpinner, { label: "Loading..." });
    }
    if (errorMessage) {
      return /* @__PURE__ */ React2.createElement(Alert, { title: "Error executing serverless function", variant: "error" }, errorMessage);
    }
    return /* @__PURE__ */ React2.createElement(Statistics, null, /* @__PURE__ */ React2.createElement(StatisticsItem, { label: "OPEN DEALS", number: dealsCount }, /* @__PURE__ */ React2.createElement(Text, null, "Total number of deals contact is associated with")), /* @__PURE__ */ React2.createElement(StatisticsItem, { label: "UNIT PRICE", number: totalAmount }, /* @__PURE__ */ React2.createElement(Text, null, "High End")));
  };
  hubspot.extend(({ runServerlessFunction }) => /* @__PURE__ */ React2.createElement(DealsSummary, { runServerless: runServerlessFunction }));
})(React, RemoteUI);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
